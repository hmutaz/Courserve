// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Status {
  PENDING
  ACCEPTED
  CANCELED
  REJECTED
  ONPROGRESS
  DONE
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  CourseStudents        CourseStudents[]
  Transaction           Transaction[]
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid()) @map("_id")
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Courses {
  id             String           @id @default(cuid()) @map("_id")
  title          String
  description    String
  slug           String
  image          String
  price          Float?
  Chapters       Chapters[]
  CourseStudents CourseStudents[]
  Transaction    Transaction[]
}

model Transaction {
  id       String   @id @default(cuid()) @map("_id")
  date     DateTime @default(now())
  price    Float
  status   Status   @default(PENDING)
  userId   String
  courseId String
  course   Courses  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chapters {
  id              String            @id @default(cuid()) @map("_id")
  title           String
  summary         String
  courseId        String
  course          Courses           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  ChapterContents ChapterContents[]
}

model ChapterContents {
  id        String   @id @default(cuid()) @map("_id")
  thumbnail String
  video_url String
  chapterId String
  chapter   Chapters @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model CourseStudents {
  id         String  @id @default(cuid()) @map("_id")
  courseId   String
  isFinished Boolean @default(false)
  certUrl    String?
  userId     String
  grade      Float
  course     Courses @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([courseId, userId])
}
